// Generated by CoffeeScript 1.6.3
(function() {
  angular.module('angularTree', []);

  angular.module('angularTree').directive('angularTree', function() {
    return {
      restrict: 'A',
      controller: function($scope) {
        $scope.$on('dragstart', function(_, children, index) {
          return $scope.from = {
            children: children,
            index: index
          };
        });
        $scope.$on('dragover', function(_, children, index) {
          return $scope.to = {
            children: children,
            index: index
          };
        });
        $scope.$on('dragleave', function() {
          return $scope.to = void 0;
        });
        return $scope.$on('drop', function(_, direction) {
          return $scope.to.children.splice($scope.to.index, 0, $scope.from.children.splice($scope.from.index, 1)[0]);
        });
      },
      compile: function(element) {
        var link, template;
        template = element.clone()[0].outerHTML;
        return link = function(scope) {
          return scope.template = template;
        };
      }
    };
  });

  angular.module('angularTree').directive('draggable', function(mousePosition) {
    return {
      restrict: 'A',
      link: function(scope, element) {
        scope.children = scope.child.children;
        return scope.$watchCollection('children', function(children) {
          var template;
          if (!!children) {
            return;
          }
          dump('children changed');
          template = angular.element(scope.template);
          $compile(template)(scope);
          return element.append(template);
        });
      }
    };
  });

  angular.module('angularTree').service('mousePosition', function($window) {
    var clientX, clientY, _ref;
    _ref = [0, 0], clientX = _ref[0], clientY = _ref[1];
    angular.element($window).bind('mousemove', function(e) {
      var _ref1;
      return _ref1 = [e.clientX, e.clientY], clientX = _ref1[0], clientY = _ref1[1], _ref1;
    });
    return {
      getRelativeLeft: function(element) {
        if (element == null) {
          element = $window.document.body;
        }
        element = angular.element(element);
        if ((element[0].offsetLeft < clientX && clientX < element[0].offsetLeft + element[0].offsetWidth)) {
          return clientX - element[0].offsetLeft;
        }
      },
      getRelativeLeftPercent: function(element) {
        var relativeLeft;
        if (element == null) {
          element = $window.document.body;
        }
        element = angular.element(element);
        relativeLeft = this.getRelativeLeft(element);
        return relativeLeft && Math.round(relativeLeft / element[0].offsetWidth * 100);
      },
      getRelativeTop: function(element) {
        if (element == null) {
          element = $window.document.body;
        }
        element = angular.element(element);
        if ((element[0].offsetTop < clientY && clientY < element[0].offsetTop + element[0].offsetHeight)) {
          return clientY - element[0].offsetTop;
        }
      },
      getRelativeTopPercent: function(element) {
        var relativeTop;
        if (element == null) {
          element = $window.document.body;
        }
        element = angular.element(element);
        relativeTop = this.getRelativeTop(element);
        return relativeTop && Math.round(relativeTop / element[0].offsetHeight * 100);
      }
    };
  });

}).call(this);
