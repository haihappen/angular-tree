// Generated by CoffeeScript 1.6.2
(function() {
  angular.module('angularTree', []);

  angular.module('angularTree').directive('angularTree', function() {
    return {
      restrict: 'A',
      controller: function($scope) {
        return $scope.$watch('to', function(to) {
          var child, _base;

          if (to == null) {
            return;
          }
          if ($scope.position !== 'to' && to === $scope.from) {
            return;
          }
          child = $scope.children.splice($scope.from, 1)[0];
          switch ($scope.position) {
            case 'above':
              return $scope.children.splice(to, 0, child);
            case 'below':
              return $scope.children.splice(to + 1, 0, child);
            case 'to':
              return ((_base = $scope.children[to]).children || (_base.children = [])).push(child);
          }
        });
      },
      compile: function(element) {
        var template;

        template = element.clone();
        template.removeAttr('ng-init');
        return function(scope) {
          return scope.template = template[0].outerHTML;
        };
      }
    };
  });

  angular.module('angularTree').directive('draggable', function($compile) {
    return {
      restrict: 'A',
      controller: function($scope) {
        return $scope.$watch('y', function() {
          return $scope.$parent.position = (function() {
            switch (false) {
              case !($scope.y < $scope.top + $scope.height * 0.25):
                return 'above';
              case !($scope.y < $scope.top + $scope.height * 0.75):
                return 'to';
              case !($scope.y < $scope.top + $scope.height):
                return 'below';
            }
          })();
        });
      },
      link: function(scope, element) {
        scope.$watch('children', function(children) {
          var template;

          if (children == null) {
            return;
          }
          template = angular.element(scope.template);
          $compile(template)(scope);
          return element.append(template);
        });
        scope.children = scope.child.children;
        element.bind('dragstart', function() {
          return scope.$apply(function() {
            scope.$parent.from = scope.$index;
            return scope.$parent.to = null;
          });
        });
        element.bind('drop', function() {
          return scope.$apply(function() {
            scope.$parent.current = null;
            return scope.$parent.to = scope.$index;
          });
        });
        element.bind('dragover', function(e) {
          scope.$apply(function() {
            scope.$parent.current = scope.$index;
            scope.top = element[0].offsetTop;
            scope.height = element[0].offsetHeight;
            return scope.y = e.clientY;
          });
          e.preventDefault();
          return e.stopPropagation();
        });
        return element.bind('dragleave', function() {
          return scope.$apply(function() {
            return scope.$parent.current = null;
          });
        });
      }
    };
  });

}).call(this);
