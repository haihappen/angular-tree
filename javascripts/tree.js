// Generated by CoffeeScript 1.4.0
(function() {
  var Tree;

  Tree = angular.module('Tree', []);

  Tree.controller('treeCtrl', function($scope) {
    $scope.start = function(x, y) {
      return $scope._start = {
        x: x,
        y: y
      };
    };
    $scope.end = function(x, y) {
      return $scope._end = {
        x: x,
        y: y
      };
    };
    $scope.length = function() {
      return [$scope._end.x - $scope._start.x, $scope._end.y - $scope._start.y];
    };
    $scope.angle = function(x, y) {
      return Math.atan2(y, x);
    };
    $scope.inRad = function(angle, point, window) {
      if (window == null) {
        window = 0.3;
      }
      return point + window > angle && point - window < angle;
    };
    return $scope.direction = function() {
      var angle, x, y, _ref;
      _ref = $scope.length(), x = _ref[0], y = _ref[1];
      console.log($scope._direction);
      console.log(x, y);
      angle = $scope.angle(x, y);
      console.log(angle);
      return $scope._direction = (function() {
        switch (false) {
          case !$scope.inRad(angle, Math.PI / -2):
            return 'up';
          case !($scope.inRad(angle, 0) || $scope.inRad(angle, Math.PI * 2)):
            return 'right';
          case !$scope.inRad(angle, Math.PI / 2):
            return 'down';
          case !$scope.inRad(angle, Math.PI):
            return 'left';
          default:
            return $scope._direction;
        }
      })();
    };
  });

  Tree.directive('draggable', function($timeout) {
    return {
      link: function(scope, element) {
        element.bind('dragstart', function(e) {
          return scope.$apply(function() {
            return scope.start(e.clientX, e.clientY);
          });
        });
        element.bind('drop', function(e) {});
        return element.bind('dragover', function(e) {
          scope.$apply(function() {
            scope.end(e.clientX, e.clientY);
            element.parent().children().removeClass('up down right left');
            element.addClass(scope.direction());
            $timeout.cancel(scope.promise);
            return scope.promise = $timeout(function() {
              return scope.start(e.clientX, e.clientY, 250);
            });
          });
          return e.preventDefault();
        });
      }
    };
  });

}).call(this);
